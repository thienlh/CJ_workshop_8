/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JTreeForm.java
 *
 * Created on Mar 31, 2014, 2:37:44 PM
 */

package jtreeapp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Enumeration;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import jtreeapp.Model.Department;
import jtreeapp.Model.Employee;

/**
 *
 * @author thienlh
 */
public class JTreeForm extends javax.swing.JFrame {

    String fileName = "jtree_employee.dat";
    DefaultMutableTreeNode root = null; //  Root node
    DefaultMutableTreeNode currentDepNode = null;  //  Department node
    DefaultMutableTreeNode currentEmpNode = null;  //  Employee node
    boolean addNewDep = false;
    boolean addNewEmp = false;

    //  Constructor
    public JTreeForm() {
        initComponents();
        this.setSize(655, 435); //  WTF is this??
        root = (DefaultMutableTreeNode) this.treeDepartment.getModel().getRoot();
        loadData();
        TreePath path = new TreePath(root); //  Expanding the tree
        treeDepartment.expandPath(path);
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeDepartment = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDepID = new javax.swing.JTextField();
        txtDepName = new javax.swing.JTextField();
        btnDepNew = new javax.swing.JToggleButton();
        btnDepRemove = new javax.swing.JButton();
        btnDepSave = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        txtEmpName = new javax.swing.JTextField();
        txtEmpEmail = new javax.swing.JTextField();
        txtEmpAdrs = new javax.swing.JTextField();
        txtEmpSalary = new javax.swing.JTextField();
        btnEmpNew = new javax.swing.JButton();
        btnEmpRemove = new javax.swing.JButton();
        btnEmpSave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnSave2File = new javax.swing.JButton();

        jLabel7.setText("jLabel7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeDepartment.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeDepartment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeDepartmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treeDepartment);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Department Detail"));

        jLabel1.setText("ID:");

        jLabel2.setText("Name:");

        txtDepID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepIDActionPerformed(evt);
            }
        });

        txtDepName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepNameActionPerformed(evt);
            }
        });

        btnDepNew.setText("New");
        btnDepNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepNewActionPerformed(evt);
            }
        });

        btnDepRemove.setText("Delete");
        btnDepRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepRemoveActionPerformed(evt);
            }
        });

        btnDepSave.setText("Save");
        btnDepSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDepID, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDepName, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDepNew)
                        .addGap(55, 55, 55)
                        .addComponent(btnDepSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(btnDepRemove)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDepID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDepName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDepRemove)
                    .addComponent(btnDepNew)
                    .addComponent(btnDepSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Employee Detail"));

        jLabel3.setText("ID:");

        jLabel4.setText("Name:");

        jLabel5.setText("Email:");

        jLabel6.setText("Address:");

        jLabel8.setText("Salary:");

        txtEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpIDActionPerformed(evt);
            }
        });

        btnEmpNew.setText("New");
        btnEmpNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpNewActionPerformed(evt);
            }
        });

        btnEmpRemove.setText("Delete");
        btnEmpRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpRemoveActionPerformed(evt);
            }
        });

        btnEmpSave.setText("Save");
        btnEmpSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmpEmail)
                            .addComponent(txtEmpName)
                            .addComponent(txtEmpID, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtEmpSalary)
                            .addComponent(txtEmpAdrs, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEmpNew)
                        .addGap(55, 55, 55)
                        .addComponent(btnEmpSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(btnEmpRemove)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEmpEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmpAdrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmpSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEmpRemove)
                    .addComponent(btnEmpNew)
                    .addComponent(btnEmpSave)))
        );

        btnSave2File.setText("Save to file");
        btnSave2File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave2FileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSave2File, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSave2File, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDepNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepNameActionPerformed

    private void btnDepSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepSaveActionPerformed
        String id = this.txtDepID.getText().trim().toUpperCase();
        txtDepID.setText(id);
        String name = this.txtDepName.getText().trim();
        txtDepName.setText(name);
        if (!validDepDetail()) {
            return;
        }
        if (addNewDep == true) {
            Department newDep = new Department(id, name);
            root.add(new DefaultMutableTreeNode(newDep));
        } else {
            ((Department) currentDepNode.getUserObject()).setDepName(name);
        }
        treeDepartment.updateUI();
        this.addNewDep = false;
    }//GEN-LAST:event_btnDepSaveActionPerformed

    private void btnDepNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepNewActionPerformed
        this.addNewDep = true;
        this.txtDepID.setText("");
        this.txtDepName.setText("");
        this.txtEmpID.setText("");
        this.txtEmpName.setText("");
        this.txtEmpEmail.setText("");
        this.txtEmpAdrs.setText("");
        this.txtEmpSalary.setText("");
        this.txtDepID.setEditable(true);
        this.txtDepID.requestFocus();
    }//GEN-LAST:event_btnDepNewActionPerformed

    private void txtEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpIDActionPerformed

    private void txtDepIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepIDActionPerformed

    private void btnDepRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepRemoveActionPerformed
        //  Only remove a department if Child = 0
        if (this.currentDepNode.getChildCount() > 0) {
            String msg = "You have to remove all employees before remove a department!";
            JOptionPane.showMessageDialog(null, msg);
        } else {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure to remove this department?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                root.remove(currentDepNode);
                treeDepartment.updateUI();
            }
        }
    }//GEN-LAST:event_btnDepRemoveActionPerformed

    private void btnEmpNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpNewActionPerformed
        this.addNewEmp = true;
        this.txtEmpID.setText("");
        this.txtEmpName.setText("");
        this.txtEmpEmail.setText("");
        this.txtEmpAdrs.setText("");
        this.txtEmpSalary.setText("");
        this.txtEmpID.requestFocus();
        this.txtEmpID.setEditable(true);
    }//GEN-LAST:event_btnEmpNewActionPerformed

    private void btnEmpSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpSaveActionPerformed
        String id = this.txtEmpID.getText().trim().toUpperCase();
        txtEmpID.setText(id);
        String name = this.txtEmpName.getText().trim();
        txtEmpName.setText(name);
        String email = this.txtEmpEmail.getText().trim();
        txtEmpEmail.setText(email);
        String address = this.txtEmpAdrs.getText().trim();
        txtEmpAdrs.setText(address);
        String salaryStr = this.txtEmpSalary.getText();
        if (salaryStr == null ? "" == null : salaryStr.equals("")) salaryStr = "-1";
        int salary = Integer.parseInt(salaryStr);
        txtEmpSalary.setText(salaryStr);

        if (!validEmpDetail()) {
            return;
        }
        if (addNewEmp == true) {
            Employee newEmp = new Employee(id, name, email, address, salary);
            currentDepNode.add(new DefaultMutableTreeNode(newEmp));
        } else {
            Employee emp = (Employee) (currentEmpNode.getUserObject());
            emp.setEmpName(name);
            emp.setEmpEmail(email);
            emp.setEmpAddress(address);
            emp.setSalary(salary);
        }
        treeDepartment.updateUI();
        addNewEmp = false;
    }//GEN-LAST:event_btnEmpSaveActionPerformed

    private void btnEmpRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpRemoveActionPerformed
        if (this.currentEmpNode != null) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are your sure to delete this employee?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                this.currentDepNode.remove(this.currentEmpNode);
                treeDepartment.updateUI();
            }
        }
    }//GEN-LAST:event_btnEmpRemoveActionPerformed

    private void btnSave2FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave2FileActionPerformed
        if (root.getChildCount() == 0) {
            JOptionPane.showMessageDialog(null, "Nothing to save!");
            return;
        }
        String str;
        try {
            FileWriter fw = new FileWriter(fileName);
            PrintWriter pw = new PrintWriter(fw);
            Enumeration deps = root.children();
            while (deps.hasMoreElements()) {
                DefaultMutableTreeNode depNode = (DefaultMutableTreeNode) deps.nextElement();
                Department dep = (Department) depNode.getUserObject();
                str = dep.getDepID() + "-" + dep.getDepName() + ":";
                pw.println(str);
                Enumeration emps = depNode.children();
                while (emps.hasMoreElements()) {
                    DefaultMutableTreeNode empNode = (DefaultMutableTreeNode) emps.nextElement();
                    Employee emp = (Employee) empNode.getUserObject();
                    str = emp.getEmpID() + "," + emp.getEmpName() + "," + emp.getEmpEmail()
                            + "," + emp.getEmpAddress() + "," + emp.getSalary();
                    pw.println(str);
                }
            }
            pw.close();
            fw.close();
            JOptionPane.showMessageDialog(null, "Data saved!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showConfirmDialog(null, "There are a problem while saving data to file!");
        }
    }//GEN-LAST:event_btnSave2FileActionPerformed

    private void treeDepartmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeDepartmentMouseClicked
        //  Turn off on-tree editing mode
        treeDepartment.cancelEditing();
        //  Get the clicked node at the last component of the path
        TreePath path = treeDepartment.getSelectionPath();
        if (path == null) {
            return;
        }

        DefaultMutableTreeNode selectedNode;
        selectedNode = (DefaultMutableTreeNode) treeDepartment.getLastSelectedPathComponent();
        //  Get the selected object in the model
        Object selectedObj = selectedNode.getUserObject();
        //  Identify selected Object
        if (selectedObj == root) {
            this.currentDepNode = null;
            this.currentEmpNode = null;
        } else {
            if (selectedObj instanceof Department) {
                this.currentDepNode = selectedNode;
                this.currentEmpNode = null;
            } else if (selectedObj instanceof Employee) {
                currentDepNode = (DefaultMutableTreeNode) selectedNode.getParent();
                currentEmpNode = selectedNode;
            }
            //  View the result
            view();
        }
    }//GEN-LAST:event_treeDepartmentMouseClicked

    //  Load data from file
    private void loadData() {
        String str;
        StringTokenizer stk;
        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            while ((str = br.readLine()) != null) {
                str = str.trim();
                boolean isDep = (str.charAt(str.length() - 1) == ':');
                stk = new StringTokenizer(str, "-:,");
                String id = stk.nextToken().trim();
                String name = stk.nextToken().trim();
                if (isDep) {
                    currentDepNode = new DefaultMutableTreeNode(new Department(id, name));
                    root.add(currentDepNode);   //  Add current Department to root node
                } else {
                    String email = stk.nextToken();
                    String address = stk.nextToken();
                    int salary = Integer.parseInt(stk.nextToken().trim());
                    currentEmpNode = new DefaultMutableTreeNode(new Employee(id, name, email, address, salary));
                    currentDepNode.add(currentEmpNode);
                }
            }
            br.close();
            fr.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "There are a problem while loading data from file!");
            e.printStackTrace();
        }
    }

    //  View Deparment and Employee detail
    private void view() {
        Department currentDep = null;
        Employee currentEmp = null;

        if (currentDepNode != null) {
            currentDep = (Department) currentDepNode.getUserObject();
        }
        if (currentEmpNode != null) {
            currentEmp = (Employee) currentEmpNode.getUserObject();
        }

        this.txtDepID.setText(currentDep != null ? currentDep.getDepID() : "");
        this.txtDepName.setText(currentDep != null ? currentDep.getDepName() : "");
        this.txtEmpID.setText(currentEmp != null ? currentEmp.getEmpID() : "");
        this.txtEmpName.setText(currentEmp != null ? currentEmp.getEmpName() : "");
        this.txtEmpEmail.setText(currentEmp != null ? currentEmp.getEmpEmail() : "");
        this.txtEmpAdrs.setText(currentEmp != null ? currentEmp.getEmpAddress() : "");
        this.txtEmpSalary.setText("" + (currentEmp != null ? currentEmp.getSalary() : ""));
        this.txtDepID.setEditable(false);
        this.txtEmpID.setEditable(false);
    }

    //  Department detail validation
    private boolean validDepDetail() {
        String id = this.txtDepID.getText().trim();
        int[] result = {-1, -1};
        //  Check ID box
        if (id.matches("\\w{2}")) {
            result[0] = 1;
        } else {
            this.txtDepID.requestFocus();
            result[0] = 0;
        }
        //  Check name box
        String name = this.txtDepName.getText();
        if (name.length() > 0) {
            result[1] = 1;
        } else {
            result[1] = 0;
        }
        //  Only ID is invalid
        if (result[0] == 0 && result[1] == 1) {
            JOptionPane.showMessageDialog(null, "Invalid ID (XX)!");
        }
        //  Only name is invalid
        if (result[0] == 1 && result[1] == 0) {
            JOptionPane.showMessageDialog(null, "Name can't be empty!");
        }
        //  ID and name are invalid
        if (result[0] == 0 && result[1] == 0) {
            JOptionPane.showMessageDialog(null, "ID and name are invalid!");
        }
        return result[0] == 1 && result[1] == 1;
    }

    //  Employee detail validation
    private boolean validEmpDetail() {
        String id = this.txtEmpID.getText().trim();
        int[] result = {1, 1, 1, 1, 1};
        //  Check ID box
        if (id.matches("E\\d{3}")) {
            //  Do nothing
        } else {
            this.txtEmpID.requestFocus();
            result[0] = 0;
        }
        //  Check email box
        String email = this.txtEmpEmail.getText().trim();
        if (email.length() > 0 && email.matches("\\w+@\\w+[.]\\w+")) {
            // Do nothing
        } else {
            result[1] = 0;
        }
        //  Check name box
        String name = this.txtEmpName.getText();
        if (name.length() > 0) {
            // Do nothing
        } else {
            result[2] = 0;
        }
        //  Check adrs box
        String adrs = this.txtEmpAdrs.getText();
        if (adrs.length() > 0) {
            // Do nothing
        } else {
            result[3] = 0;
        }
        //  Check salary box
        String salaryStr = this.txtEmpSalary.getText();
        int salary = Integer.parseInt(salaryStr);
        if (salary<0 || salary> 999999999) {
            // Do nothing
        } else {
            result[4] = 0;
        }
        //  All wrong
        if (result[0] == 0 && result[1] == 0 && result[2] == 0 && result[3] == 0 && result[4] == 0) {
            JOptionPane.showMessageDialog(null, "You entered nothing or all of them are invalid!");
        }
        
        if (result[0] == 0) JOptionPane.showMessageDialog(null, "ID is invalid! (Exxx)");
        if (result[1] == 0) JOptionPane.showMessageDialog(null, "Name can't be empty!");
        if (result[2] == 0) JOptionPane.showMessageDialog(null, "Email is invalid!");
        if (result[3] == 0) JOptionPane.showMessageDialog(null, "Address can't be empty!");
        if (result[4] == 0) JOptionPane.showMessageDialog(null, "Salary can't be negative or larger than 999999999!");
        return result[0] == 1 && result[1] == 1 && result[2] == 1 && result[3] == 1 && result[4] == 1;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTreeForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnDepNew;
    private javax.swing.JButton btnDepRemove;
    private javax.swing.JButton btnDepSave;
    private javax.swing.JButton btnEmpNew;
    private javax.swing.JButton btnEmpRemove;
    private javax.swing.JButton btnEmpSave;
    private javax.swing.JButton btnSave2File;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree treeDepartment;
    private javax.swing.JTextField txtDepID;
    private javax.swing.JTextField txtDepName;
    private javax.swing.JTextField txtEmpAdrs;
    private javax.swing.JTextField txtEmpEmail;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JTextField txtEmpSalary;
    // End of variables declaration//GEN-END:variables

}
